// Copyright 2022-present Seal Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatasetIngestRequestType int32

const (
	DatasetIngestRequestType_Compliance_License_Tag     DatasetIngestRequestType = 0
	DatasetIngestRequestType_Compliance_License         DatasetIngestRequestType = 1
	DatasetIngestRequestType_Risk_Secret_Leak_Tag       DatasetIngestRequestType = 2
	DatasetIngestRequestType_Risk_Secret_Leak           DatasetIngestRequestType = 3
	DatasetIngestRequestType_Weakness_Vulnerability_Tag DatasetIngestRequestType = 4
	DatasetIngestRequestType_Weakness_Vulnerability     DatasetIngestRequestType = 5
)

// Enum value maps for DatasetIngestRequestType.
var (
	DatasetIngestRequestType_name = map[int32]string{
		0: "Compliance_License_Tag",
		1: "Compliance_License",
		2: "Risk_Secret_Leak_Tag",
		3: "Risk_Secret_Leak",
		4: "Weakness_Vulnerability_Tag",
		5: "Weakness_Vulnerability",
	}
	DatasetIngestRequestType_value = map[string]int32{
		"Compliance_License_Tag":     0,
		"Compliance_License":         1,
		"Risk_Secret_Leak_Tag":       2,
		"Risk_Secret_Leak":           3,
		"Weakness_Vulnerability_Tag": 4,
		"Weakness_Vulnerability":     5,
	}
)

func (x DatasetIngestRequestType) Enum() *DatasetIngestRequestType {
	p := new(DatasetIngestRequestType)
	*p = x
	return p
}

func (x DatasetIngestRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetIngestRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (DatasetIngestRequestType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x DatasetIngestRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetIngestRequestType.Descriptor instead.
func (DatasetIngestRequestType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type ComplianceLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// primary key
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	Tags          []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// information
	Description string   `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []string `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	// operation
	Details []byte `protobuf:"bytes,31,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ComplianceLicense) Reset() {
	*x = ComplianceLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicense) ProtoMessage() {}

func (x *ComplianceLicense) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicense.ProtoReflect.Descriptor instead.
func (*ComplianceLicense) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *ComplianceLicense) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComplianceLicense) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ComplianceLicense) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceLicense) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ComplianceLicense) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ComplianceLicense) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *ComplianceLicense) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ComplianceLicense) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceLicense) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ComplianceLicense) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

type ComplianceLicenseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*ComplianceLicense `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ComplianceLicenseList) Reset() {
	*x = ComplianceLicenseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicenseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicenseList) ProtoMessage() {}

func (x *ComplianceLicenseList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicenseList.ProtoReflect.Descriptor instead.
func (*ComplianceLicenseList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceLicenseList) GetValue() []*ComplianceLicense {
	if x != nil {
		return x.Value
	}
	return nil
}

type ComplianceLicenseTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// primary key
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	// information
	Description string   `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []string `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	// operation
	Category string `protobuf:"bytes,31,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ComplianceLicenseTag) Reset() {
	*x = ComplianceLicenseTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicenseTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicenseTag) ProtoMessage() {}

func (x *ComplianceLicenseTag) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicenseTag.ProtoReflect.Descriptor instead.
func (*ComplianceLicenseTag) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceLicenseTag) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComplianceLicenseTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplianceLicenseTag) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ComplianceLicenseTag) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ComplianceLicenseTag) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *ComplianceLicenseTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceLicenseTag) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ComplianceLicenseTag) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type ComplianceLicenseTagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*ComplianceLicenseTag `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ComplianceLicenseTagList) Reset() {
	*x = ComplianceLicenseTagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceLicenseTagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceLicenseTagList) ProtoMessage() {}

func (x *ComplianceLicenseTagList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceLicenseTagList.ProtoReflect.Descriptor instead.
func (*ComplianceLicenseTagList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceLicenseTagList) GetValue() []*ComplianceLicenseTag {
	if x != nil {
		return x.Value
	}
	return nil
}

type RiskSecretLeak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// primary key
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	Tags          []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// information
	Description string   `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []string `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	// operation
	Block []byte `protobuf:"bytes,31,opt,name=block,proto3" json:"block,omitempty"`
	Allow []byte `protobuf:"bytes,32,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (x *RiskSecretLeak) Reset() {
	*x = RiskSecretLeak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskSecretLeak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSecretLeak) ProtoMessage() {}

func (x *RiskSecretLeak) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSecretLeak.ProtoReflect.Descriptor instead.
func (*RiskSecretLeak) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *RiskSecretLeak) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RiskSecretLeak) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RiskSecretLeak) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RiskSecretLeak) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RiskSecretLeak) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RiskSecretLeak) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *RiskSecretLeak) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RiskSecretLeak) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RiskSecretLeak) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *RiskSecretLeak) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *RiskSecretLeak) GetAllow() []byte {
	if x != nil {
		return x.Allow
	}
	return nil
}

type RiskSecretLeakList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*RiskSecretLeak `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *RiskSecretLeakList) Reset() {
	*x = RiskSecretLeakList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskSecretLeakList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSecretLeakList) ProtoMessage() {}

func (x *RiskSecretLeakList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSecretLeakList.ProtoReflect.Descriptor instead.
func (*RiskSecretLeakList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *RiskSecretLeakList) GetValue() []*RiskSecretLeak {
	if x != nil {
		return x.Value
	}
	return nil
}

type RiskSecretLeakTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// primary key
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	// information
	Description string   `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []string `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	// operation
	Category string `protobuf:"bytes,31,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *RiskSecretLeakTag) Reset() {
	*x = RiskSecretLeakTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskSecretLeakTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSecretLeakTag) ProtoMessage() {}

func (x *RiskSecretLeakTag) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSecretLeakTag.ProtoReflect.Descriptor instead.
func (*RiskSecretLeakTag) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *RiskSecretLeakTag) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RiskSecretLeakTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RiskSecretLeakTag) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RiskSecretLeakTag) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RiskSecretLeakTag) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *RiskSecretLeakTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RiskSecretLeakTag) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *RiskSecretLeakTag) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type RiskSecretLeakTagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*RiskSecretLeakTag `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *RiskSecretLeakTagList) Reset() {
	*x = RiskSecretLeakTagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskSecretLeakTagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSecretLeakTagList) ProtoMessage() {}

func (x *RiskSecretLeakTagList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSecretLeakTagList.ProtoReflect.Descriptor instead.
func (*RiskSecretLeakTagList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *RiskSecretLeakTagList) GetValue() []*RiskSecretLeakTag {
	if x != nil {
		return x.Value
	}
	return nil
}

type WeaknessVulnerability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// primary key
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Purl      string `protobuf:"bytes,4,opt,name=purl,proto3" json:"purl,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	Tags          []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// information
	Description string   `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []string `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	// operation
	Summary   string                 `protobuf:"bytes,31,opt,name=summary,proto3" json:"summary,omitempty"`
	PurlFuzzy string                 `protobuf:"bytes,32,opt,name=purl_fuzzy,json=purlFuzzy,proto3" json:"purl_fuzzy,omitempty"`
	Limited   string                 `protobuf:"bytes,33,opt,name=limited,proto3" json:"limited,omitempty"`
	Affected  string                 `protobuf:"bytes,34,opt,name=affected,proto3" json:"affected,omitempty"`
	Patched   []string               `protobuf:"bytes,35,rep,name=patched,proto3" json:"patched,omitempty"`
	Cvss      []byte                 `protobuf:"bytes,36,opt,name=cvss,proto3" json:"cvss,omitempty"`
	Cwes      []string               `protobuf:"bytes,37,rep,name=cwes,proto3" json:"cwes,omitempty"`
	Published *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=published,proto3" json:"published,omitempty"`
	Modified  *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *WeaknessVulnerability) Reset() {
	*x = WeaknessVulnerability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerability) ProtoMessage() {}

func (x *WeaknessVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerability.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerability) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *WeaknessVulnerability) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WeaknessVulnerability) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WeaknessVulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeaknessVulnerability) GetPurl() string {
	if x != nil {
		return x.Purl
	}
	return ""
}

func (x *WeaknessVulnerability) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WeaknessVulnerability) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *WeaknessVulnerability) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *WeaknessVulnerability) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *WeaknessVulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WeaknessVulnerability) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *WeaknessVulnerability) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *WeaknessVulnerability) GetPurlFuzzy() string {
	if x != nil {
		return x.PurlFuzzy
	}
	return ""
}

func (x *WeaknessVulnerability) GetLimited() string {
	if x != nil {
		return x.Limited
	}
	return ""
}

func (x *WeaknessVulnerability) GetAffected() string {
	if x != nil {
		return x.Affected
	}
	return ""
}

func (x *WeaknessVulnerability) GetPatched() []string {
	if x != nil {
		return x.Patched
	}
	return nil
}

func (x *WeaknessVulnerability) GetCvss() []byte {
	if x != nil {
		return x.Cvss
	}
	return nil
}

func (x *WeaknessVulnerability) GetCwes() []string {
	if x != nil {
		return x.Cwes
	}
	return nil
}

func (x *WeaknessVulnerability) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *WeaknessVulnerability) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type WeaknessVulnerabilityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*WeaknessVulnerability `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *WeaknessVulnerabilityList) Reset() {
	*x = WeaknessVulnerabilityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityList) ProtoMessage() {}

func (x *WeaknessVulnerabilityList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityList.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *WeaknessVulnerabilityList) GetValue() []*WeaknessVulnerability {
	if x != nil {
		return x.Value
	}
	return nil
}

type WeaknessVulnerabilityTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// primary key
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// management
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DeprecateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=deprecate_time,json=deprecateTime,proto3,oneof" json:"deprecate_time,omitempty"`
	// information
	Description string   `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	References  []string `protobuf:"bytes,22,rep,name=references,proto3" json:"references,omitempty"`
	// operation
	Category  string                 `protobuf:"bytes,31,opt,name=category,proto3" json:"category,omitempty"`
	Cvsses    []byte                 `protobuf:"bytes,32,opt,name=cvsses,proto3" json:"cvsses,omitempty"`
	Cwes      []string               `protobuf:"bytes,33,rep,name=cwes,proto3" json:"cwes,omitempty"`
	Published *timestamppb.Timestamp `protobuf:"bytes,34,opt,name=published,proto3" json:"published,omitempty"`
	Modified  *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *WeaknessVulnerabilityTag) Reset() {
	*x = WeaknessVulnerabilityTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityTag) ProtoMessage() {}

func (x *WeaknessVulnerabilityTag) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityTag.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityTag) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *WeaknessVulnerabilityTag) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WeaknessVulnerabilityTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeaknessVulnerabilityTag) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetDeprecateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecateTime
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WeaknessVulnerabilityTag) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *WeaknessVulnerabilityTag) GetCvsses() []byte {
	if x != nil {
		return x.Cvsses
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetCwes() []string {
	if x != nil {
		return x.Cwes
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *WeaknessVulnerabilityTag) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type WeaknessVulnerabilityTagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*WeaknessVulnerabilityTag `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *WeaknessVulnerabilityTagList) Reset() {
	*x = WeaknessVulnerabilityTagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeaknessVulnerabilityTagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeaknessVulnerabilityTagList) ProtoMessage() {}

func (x *WeaknessVulnerabilityTagList) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeaknessVulnerabilityTagList.ProtoReflect.Descriptor instead.
func (*WeaknessVulnerabilityTagList) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *WeaknessVulnerabilityTagList) GetValue() []*WeaknessVulnerabilityTag {
	if x != nil {
		return x.Value
	}
	return nil
}

type DatasetIngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination
	Page    int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PerPage *int32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3,oneof" json:"per_page,omitempty"`
	// condition
	Type  DatasetIngestRequestType `protobuf:"varint,11,opt,name=type,proto3,enum=schema.DatasetIngestRequestType" json:"type,omitempty"`
	Since *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=since,proto3,oneof" json:"since,omitempty"`
}

func (x *DatasetIngestRequest) Reset() {
	*x = DatasetIngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetIngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetIngestRequest) ProtoMessage() {}

func (x *DatasetIngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetIngestRequest.ProtoReflect.Descriptor instead.
func (*DatasetIngestRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *DatasetIngestRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DatasetIngestRequest) GetPerPage() int32 {
	if x != nil && x.PerPage != nil {
		return *x.PerPage
	}
	return 0
}

func (x *DatasetIngestRequest) GetType() DatasetIngestRequestType {
	if x != nil {
		return x.Type
	}
	return DatasetIngestRequestType_Compliance_License_Tag
}

func (x *DatasetIngestRequest) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

type DatasetIngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pagination
	NextPage int32 `protobuf:"varint,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PerPage  int32 `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Total    int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// result
	//
	// Types that are assignable to List:
	//	*DatasetIngestResponse_ComplianceLicense
	//	*DatasetIngestResponse_ComplianceLicenseTag
	//	*DatasetIngestResponse_RiskSecretLeak
	//	*DatasetIngestResponse_RiskSecretLeakTag
	//	*DatasetIngestResponse_WeaknessVulnerability
	//	*DatasetIngestResponse_WeaknessVulnerabilityTag
	List isDatasetIngestResponse_List `protobuf_oneof:"list"`
}

func (x *DatasetIngestResponse) Reset() {
	*x = DatasetIngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetIngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetIngestResponse) ProtoMessage() {}

func (x *DatasetIngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetIngestResponse.ProtoReflect.Descriptor instead.
func (*DatasetIngestResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *DatasetIngestResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *DatasetIngestResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *DatasetIngestResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (m *DatasetIngestResponse) GetList() isDatasetIngestResponse_List {
	if m != nil {
		return m.List
	}
	return nil
}

func (x *DatasetIngestResponse) GetComplianceLicense() *ComplianceLicenseList {
	if x, ok := x.GetList().(*DatasetIngestResponse_ComplianceLicense); ok {
		return x.ComplianceLicense
	}
	return nil
}

func (x *DatasetIngestResponse) GetComplianceLicenseTag() *ComplianceLicenseTagList {
	if x, ok := x.GetList().(*DatasetIngestResponse_ComplianceLicenseTag); ok {
		return x.ComplianceLicenseTag
	}
	return nil
}

func (x *DatasetIngestResponse) GetRiskSecretLeak() *RiskSecretLeakList {
	if x, ok := x.GetList().(*DatasetIngestResponse_RiskSecretLeak); ok {
		return x.RiskSecretLeak
	}
	return nil
}

func (x *DatasetIngestResponse) GetRiskSecretLeakTag() *RiskSecretLeakTagList {
	if x, ok := x.GetList().(*DatasetIngestResponse_RiskSecretLeakTag); ok {
		return x.RiskSecretLeakTag
	}
	return nil
}

func (x *DatasetIngestResponse) GetWeaknessVulnerability() *WeaknessVulnerabilityList {
	if x, ok := x.GetList().(*DatasetIngestResponse_WeaknessVulnerability); ok {
		return x.WeaknessVulnerability
	}
	return nil
}

func (x *DatasetIngestResponse) GetWeaknessVulnerabilityTag() *WeaknessVulnerabilityTagList {
	if x, ok := x.GetList().(*DatasetIngestResponse_WeaknessVulnerabilityTag); ok {
		return x.WeaknessVulnerabilityTag
	}
	return nil
}

type isDatasetIngestResponse_List interface {
	isDatasetIngestResponse_List()
}

type DatasetIngestResponse_ComplianceLicense struct {
	ComplianceLicense *ComplianceLicenseList `protobuf:"bytes,11,opt,name=compliance_license,json=complianceLicense,proto3,oneof"`
}

type DatasetIngestResponse_ComplianceLicenseTag struct {
	ComplianceLicenseTag *ComplianceLicenseTagList `protobuf:"bytes,12,opt,name=compliance_license_tag,json=complianceLicenseTag,proto3,oneof"`
}

type DatasetIngestResponse_RiskSecretLeak struct {
	RiskSecretLeak *RiskSecretLeakList `protobuf:"bytes,13,opt,name=risk_secret_leak,json=riskSecretLeak,proto3,oneof"`
}

type DatasetIngestResponse_RiskSecretLeakTag struct {
	RiskSecretLeakTag *RiskSecretLeakTagList `protobuf:"bytes,14,opt,name=risk_secret_leak_tag,json=riskSecretLeakTag,proto3,oneof"`
}

type DatasetIngestResponse_WeaknessVulnerability struct {
	WeaknessVulnerability *WeaknessVulnerabilityList `protobuf:"bytes,15,opt,name=weakness_vulnerability,json=weaknessVulnerability,proto3,oneof"`
}

type DatasetIngestResponse_WeaknessVulnerabilityTag struct {
	WeaknessVulnerabilityTag *WeaknessVulnerabilityTagList `protobuf:"bytes,16,opt,name=weakness_vulnerability_tag,json=weaknessVulnerabilityTag,proto3,oneof"`
}

func (*DatasetIngestResponse_ComplianceLicense) isDatasetIngestResponse_List() {}

func (*DatasetIngestResponse_ComplianceLicenseTag) isDatasetIngestResponse_List() {}

func (*DatasetIngestResponse_RiskSecretLeak) isDatasetIngestResponse_List() {}

func (*DatasetIngestResponse_RiskSecretLeakTag) isDatasetIngestResponse_List() {}

func (*DatasetIngestResponse_WeaknessVulnerability) isDatasetIngestResponse_List() {}

func (*DatasetIngestResponse_WeaknessVulnerabilityTag) isDatasetIngestResponse_List() {}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x48, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x0e,
	0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x69, 0x73, 0x6b, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x11,
	0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x54, 0x61,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x52, 0x69, 0x73, 0x6b,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xbb, 0x05, 0x0a, 0x15, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x75,
	0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x75, 0x7a,
	0x7a, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x72, 0x6c, 0x46, 0x75,
	0x7a, 0x7a, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x76, 0x73, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x63, 0x76, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x77, 0x65, 0x73, 0x18,
	0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x77, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x50, 0x0a, 0x19, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e,
	0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8f, 0x04, 0x0a, 0x18, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x76, 0x73, 0x73, 0x65, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x76, 0x73, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x77, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x77, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73,
	0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61,
	0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x01, 0x0a,
	0x14, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x05, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xf3, 0x04,
	0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x46, 0x0a, 0x10, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6c,
	0x65, 0x61, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x12, 0x50, 0x0a, 0x14, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x5a, 0x0a, 0x16, 0x77, 0x65, 0x61,
	0x6b, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x1a, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x18, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x2a, 0xba, 0x01, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x54, 0x61, 0x67, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x69, 0x73, 0x6b, 0x5f, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x4c, 0x65, 0x61, 0x6b, 0x5f, 0x54, 0x61, 0x67, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x69, 0x73, 0x6b, 0x5f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x4c, 0x65,
	0x61, 0x6b, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x54,
	0x61, 0x67, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x05,
	0x32, 0x5d, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65,
	0x61, 0x6c, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_proto_goTypes = []interface{}{
	(DatasetIngestRequestType)(0),        // 0: schema.DatasetIngestRequestType
	(*ComplianceLicense)(nil),            // 1: schema.ComplianceLicense
	(*ComplianceLicenseList)(nil),        // 2: schema.ComplianceLicenseList
	(*ComplianceLicenseTag)(nil),         // 3: schema.ComplianceLicenseTag
	(*ComplianceLicenseTagList)(nil),     // 4: schema.ComplianceLicenseTagList
	(*RiskSecretLeak)(nil),               // 5: schema.RiskSecretLeak
	(*RiskSecretLeakList)(nil),           // 6: schema.RiskSecretLeakList
	(*RiskSecretLeakTag)(nil),            // 7: schema.RiskSecretLeakTag
	(*RiskSecretLeakTagList)(nil),        // 8: schema.RiskSecretLeakTagList
	(*WeaknessVulnerability)(nil),        // 9: schema.WeaknessVulnerability
	(*WeaknessVulnerabilityList)(nil),    // 10: schema.WeaknessVulnerabilityList
	(*WeaknessVulnerabilityTag)(nil),     // 11: schema.WeaknessVulnerabilityTag
	(*WeaknessVulnerabilityTagList)(nil), // 12: schema.WeaknessVulnerabilityTagList
	(*DatasetIngestRequest)(nil),         // 13: schema.DatasetIngestRequest
	(*DatasetIngestResponse)(nil),        // 14: schema.DatasetIngestResponse
	(*timestamppb.Timestamp)(nil),        // 15: google.protobuf.Timestamp
}
var file_api_proto_depIdxs = []int32{
	15, // 0: schema.ComplianceLicense.create_time:type_name -> google.protobuf.Timestamp
	15, // 1: schema.ComplianceLicense.update_time:type_name -> google.protobuf.Timestamp
	15, // 2: schema.ComplianceLicense.deprecate_time:type_name -> google.protobuf.Timestamp
	1,  // 3: schema.ComplianceLicenseList.value:type_name -> schema.ComplianceLicense
	15, // 4: schema.ComplianceLicenseTag.create_time:type_name -> google.protobuf.Timestamp
	15, // 5: schema.ComplianceLicenseTag.update_time:type_name -> google.protobuf.Timestamp
	15, // 6: schema.ComplianceLicenseTag.deprecate_time:type_name -> google.protobuf.Timestamp
	3,  // 7: schema.ComplianceLicenseTagList.value:type_name -> schema.ComplianceLicenseTag
	15, // 8: schema.RiskSecretLeak.create_time:type_name -> google.protobuf.Timestamp
	15, // 9: schema.RiskSecretLeak.update_time:type_name -> google.protobuf.Timestamp
	15, // 10: schema.RiskSecretLeak.deprecate_time:type_name -> google.protobuf.Timestamp
	5,  // 11: schema.RiskSecretLeakList.value:type_name -> schema.RiskSecretLeak
	15, // 12: schema.RiskSecretLeakTag.create_time:type_name -> google.protobuf.Timestamp
	15, // 13: schema.RiskSecretLeakTag.update_time:type_name -> google.protobuf.Timestamp
	15, // 14: schema.RiskSecretLeakTag.deprecate_time:type_name -> google.protobuf.Timestamp
	7,  // 15: schema.RiskSecretLeakTagList.value:type_name -> schema.RiskSecretLeakTag
	15, // 16: schema.WeaknessVulnerability.create_time:type_name -> google.protobuf.Timestamp
	15, // 17: schema.WeaknessVulnerability.update_time:type_name -> google.protobuf.Timestamp
	15, // 18: schema.WeaknessVulnerability.deprecate_time:type_name -> google.protobuf.Timestamp
	15, // 19: schema.WeaknessVulnerability.published:type_name -> google.protobuf.Timestamp
	15, // 20: schema.WeaknessVulnerability.modified:type_name -> google.protobuf.Timestamp
	9,  // 21: schema.WeaknessVulnerabilityList.value:type_name -> schema.WeaknessVulnerability
	15, // 22: schema.WeaknessVulnerabilityTag.create_time:type_name -> google.protobuf.Timestamp
	15, // 23: schema.WeaknessVulnerabilityTag.update_time:type_name -> google.protobuf.Timestamp
	15, // 24: schema.WeaknessVulnerabilityTag.deprecate_time:type_name -> google.protobuf.Timestamp
	15, // 25: schema.WeaknessVulnerabilityTag.published:type_name -> google.protobuf.Timestamp
	15, // 26: schema.WeaknessVulnerabilityTag.modified:type_name -> google.protobuf.Timestamp
	11, // 27: schema.WeaknessVulnerabilityTagList.value:type_name -> schema.WeaknessVulnerabilityTag
	0,  // 28: schema.DatasetIngestRequest.type:type_name -> schema.DatasetIngestRequestType
	15, // 29: schema.DatasetIngestRequest.since:type_name -> google.protobuf.Timestamp
	2,  // 30: schema.DatasetIngestResponse.compliance_license:type_name -> schema.ComplianceLicenseList
	4,  // 31: schema.DatasetIngestResponse.compliance_license_tag:type_name -> schema.ComplianceLicenseTagList
	6,  // 32: schema.DatasetIngestResponse.risk_secret_leak:type_name -> schema.RiskSecretLeakList
	8,  // 33: schema.DatasetIngestResponse.risk_secret_leak_tag:type_name -> schema.RiskSecretLeakTagList
	10, // 34: schema.DatasetIngestResponse.weakness_vulnerability:type_name -> schema.WeaknessVulnerabilityList
	12, // 35: schema.DatasetIngestResponse.weakness_vulnerability_tag:type_name -> schema.WeaknessVulnerabilityTagList
	13, // 36: schema.DatasetService.Ingest:input_type -> schema.DatasetIngestRequest
	14, // 37: schema.DatasetService.Ingest:output_type -> schema.DatasetIngestResponse
	37, // [37:38] is the sub-list for method output_type
	36, // [36:37] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicenseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicenseTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceLicenseTagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskSecretLeak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskSecretLeakList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskSecretLeakTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskSecretLeakTagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeaknessVulnerabilityTagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetIngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetIngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_api_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DatasetIngestResponse_ComplianceLicense)(nil),
		(*DatasetIngestResponse_ComplianceLicenseTag)(nil),
		(*DatasetIngestResponse_RiskSecretLeak)(nil),
		(*DatasetIngestResponse_RiskSecretLeakTag)(nil),
		(*DatasetIngestResponse_WeaknessVulnerability)(nil),
		(*DatasetIngestResponse_WeaknessVulnerabilityTag)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
