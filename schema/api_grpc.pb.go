// Copyright 2022-present Seal Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	Ingest(ctx context.Context, opts ...grpc.CallOption) (DatasetService_IngestClient, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (DatasetService_IngestClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatasetService_ServiceDesc.Streams[0], "/schema.DatasetService/Ingest", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasetServiceIngestClient{stream}
	return x, nil
}

type DatasetService_IngestClient interface {
	Send(*DatasetIngestRequest) error
	Recv() (*DatasetIngestResponse, error)
	grpc.ClientStream
}

type datasetServiceIngestClient struct {
	grpc.ClientStream
}

func (x *datasetServiceIngestClient) Send(m *DatasetIngestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datasetServiceIngestClient) Recv() (*DatasetIngestResponse, error) {
	m := new(DatasetIngestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations must embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	Ingest(DatasetService_IngestServer) error
	mustEmbedUnimplementedDatasetServiceServer()
}

// UnimplementedDatasetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) Ingest(DatasetService_IngestServer) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedDatasetServiceServer) mustEmbedUnimplementedDatasetServiceServer() {}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatasetServiceServer).Ingest(&datasetServiceIngestServer{stream})
}

type DatasetService_IngestServer interface {
	Send(*DatasetIngestResponse) error
	Recv() (*DatasetIngestRequest, error)
	grpc.ServerStream
}

type datasetServiceIngestServer struct {
	grpc.ServerStream
}

func (x *datasetServiceIngestServer) Send(m *DatasetIngestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datasetServiceIngestServer) Recv() (*DatasetIngestRequest, error) {
	m := new(DatasetIngestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _DatasetService_Ingest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
